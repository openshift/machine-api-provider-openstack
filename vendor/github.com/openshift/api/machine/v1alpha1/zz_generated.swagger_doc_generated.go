package v1alpha1

// This file contains a collection of methods that can be used from go-restful to
// generate Swagger API documentation for its models. Please read this PR for more
// information on the implementation: https://github.com/emicklei/go-restful/pull/215
//
// TODOs are ignored from the parser (e.g. TODO(andronat):... || TODO:...) if and only if
// they are on one line! For multiple line or blocks that you want to ignore use ---.
// Any context after a --- is ignored.
//
// Those methods can be generated by using hack/update-swagger-docs.sh

// AUTO-GENERATED FUNCTIONS START HERE
var map_NetworkParam = map[string]string{
	"uuid":                  "The UUID of the network. Required if you omit the port attribute.",
	"fixedIp":               "A fixed IPv4 address for the NIC.",
	"filter":                "Filters for optional network query",
	"subnets":               "Subnet within a network to use",
	"noAllowedAddressPairs": "NoAllowedAddressPairs disables creation of allowed address pairs for the network ports",
	"portTags":              "PortTags allows users to specify a list of tags to add to ports created in a given network",
	"portSecurity":          "PortSecurity optionally enables or disables security on ports managed by OpenStack",
}

func (NetworkParam) SwaggerDoc() map[string]string {
	return map_NetworkParam
}

var map_OpenstackProviderSpec = map[string]string{
	"":                 "OpenstackProviderSpec is the type that will be embedded in a Machine.Spec.ProviderSpec field for an OpenStack Instance. It is used by the Openstack machine actuator to create a single machine instance. Compatibility level 4: No compatibility is provided, the API can change at any point for any reason. These capabilities should not be used by applications needing long term support.",
	"cloudsSecret":     "The name of the secret containing the openstack credentials",
	"cloudName":        "The name of the cloud to use from the clouds secret",
	"flavor":           "The flavor reference for the flavor for your server instance.",
	"image":            "The name of the image to use for your server instance. If the RootVolume is specified, this will be ignored and use rootVolume directly.",
	"keyName":          "The ssh key to inject in the instance",
	"sshUserName":      "The machine ssh username",
	"networks":         "A networks object. Required parameter when there are multiple networks defined for the tenant. When you do not specify the networks parameter, the server attaches to the only network created for the current tenant.",
	"ports":            "Create and assign additional ports to instances",
	"availabilityZone": "The availability zone from which to launch the server.",
	"securityGroups":   "The names of the security groups to assign to the instance",
	"userDataSecret":   "The name of the secret containing the user data (startup script in most cases)",
	"trunk":            "Whether the server instance is created on a trunk port or not.",
	"tags":             "Machine tags Requires Nova api 2.52 minimum!",
	"serverMetadata":   "Metadata mapping. Allows you to create a map of key value pairs to add to the server instance.",
	"configDrive":      "Config Drive support",
	"rootVolume":       "The volume metadata to boot from",
	"serverGroupID":    "The server group to assign the machine to.",
	"serverGroupName":  "The server group to assign the machine to. A server group with that name will be created if it does not exist. If both ServerGroupID and ServerGroupName are non-empty, they must refer to the same OpenStack resource.",
	"primarySubnet":    "The subnet that a set of machines will get ingress/egress traffic from",
}

func (OpenstackProviderSpec) SwaggerDoc() map[string]string {
	return map_OpenstackProviderSpec
}

var map_PortOpts = map[string]string{
	"hostID":       "The ID of the host where the port is allocated",
	"vnicType":     "The virtual network interface card (vNIC) type that is bound to the neutron port.",
	"profile":      "A dictionary that enables the application running on the specified host to pass and receive virtual network interface (VIF) port-specific information to the plug-in.",
	"portSecurity": "enable or disable security on a given port incompatible with securityGroups and allowedAddressPairs",
	"trunk":        "Enables and disables trunk at port level. If not provided, openStackMachine.Spec.Trunk is inherited.",
}

func (PortOpts) SwaggerDoc() map[string]string {
	return map_PortOpts
}

var map_SecurityGroupParam = map[string]string{
	"uuid":   "Security Group UID",
	"name":   "Security Group name",
	"filter": "Filters used to query security groups in openstack",
}

func (SecurityGroupParam) SwaggerDoc() map[string]string {
	return map_SecurityGroupParam
}

var map_SubnetParam = map[string]string{
	"uuid":         "The UUID of the network. Required if you omit the port attribute.",
	"filter":       "Filters for optional network query",
	"portTags":     "PortTags are tags that are added to ports created on this subnet",
	"portSecurity": "PortSecurity optionally enables or disables security on ports managed by OpenStack",
}

func (SubnetParam) SwaggerDoc() map[string]string {
	return map_SubnetParam
}

// AUTO-GENERATED FUNCTIONS END HERE
